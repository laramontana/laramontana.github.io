---
layout: post
title:      "Object-oriented designed burgers "
date:       2017-10-13 06:22:03 -0400
permalink:  object-oriented_designed_burgers
---


Once me and my friend were watching the episode of [«Halt and catch fire»](http://www.imdb.com/title/tt2543312/) where Tom suggests Cameron to update their game and build it using object oriented programming (OOP). As the CEO Cameron tells him it is a bad idea, because they would waste a lot of time and money on doing so. They have a huge fight, but do not really talk about particular benefits or disadvantages of OO approach comparing to the paradigm they are using. And then my friend asked me “What does OOP mean?  How is it different and beneficial?” At that moment, I guess, I felt like all dogs do – when they understand what they hear and know the answer, but do not know how to put it in words. 

By that time I have almost completed Sinatra section of Full Stack Web Development Curriculum at Flatiron School, but had to temporarily pause my studies. So I thought it was a good timing to catch up on learning programing with books and to strengthen theoretical knowledge to be able to talk about certain concepts. After asking myself questions about things I think I know, I realized that the tricky part about explaining OOP is that we ourselves are actually objects and we are surrounded by another objects. This fact is so obvious that it did not come into my head in the first place. 

While procedural programming is based on set of processes (surprise!), which are tied up with specific parameters and actions, OOP is about attributes and actions in general, which can be applied to multiple different, but similar objects. Let’s say we live our dream and eat burgers all day every day. And we make a huge double cheeseburger for breakfast with procedural programming. If for lunch we want to make a bacon burger, we will have to make another burger program for it. Even if we want a regular cheeseburger, we will still have to write another program. We would probably go back to our previous double cheeseburger program as it seems like the task is very similar, and we could take it as a base, although we would still have to go through it in order to find and update some of it processes, such as putting less cheese, adding bacon, changing frying time etc. However if we use OOP, we can build a program for cooking any type of burgers in general. We could make multiple instances of burger object by only changing data, like ingredients, size, shape and so on, instead of building a new program for each burger. Because it is still a burger and all burgers have pretty much the same attributes and functions. Even if we want our burger to fly, we could add this superpower to existing OO program by extending a number of functions. 

I love music as much as I love burgers, so I made a Music library app with Sinatra. In this app each user has an account, where he or she can add songs, edit or delete their songs, or find some inspiration by checking what other users added. This data is accessed in database via ActiveRecord gem. To achieve that I made three models – User, Song and Artist, where songs belong to a user and user has many songs and many artists through songs. Controllers are responsible for taking correspondent user requests and actually run actions, which are based in the models; and then render a relevant view file. In the future I plan to make lists of songs nicer by sorting them by an artist name, or more likely I will group them differently visually and add some CSS as well. Possibly I will extend the models to make it more real, where songs can have different genres and can belong to more than one artist. 

[Music library app](https://github.com/laramontana/music-library-sinatra-portfolio-project)
